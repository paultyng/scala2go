package main

import (
	"archive/zip"
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/pkg/errors"
	"github.com/spf13/cobra"
	"github.com/spf13/viper"
)

var jarFiles []string
var goFile string
var packageName string

var rootCmd = &cobra.Command{
	Use:   "scala2go",
	Short: "Transform Scala to Go",
	Long:  `Transform Scala classes in jar files to go structs.`,
	RunE: func(cmd *cobra.Command, classNames []string) error {
		if len(jarFiles) == 0 {
			return errors.Errorf("jar files are required")
		}

		if goFile == "" {
			return errors.Errorf("go-file is required")
		}

		var out io.Writer = os.Stdout
		if goFile != "-" {
			f, err := os.OpenFile(goFile, os.O_RDWR|os.O_CREATE, 0755)
			if err != nil {
				return errors.Wrap(err, "unable to open go file")
			}
			out = f
			defer f.Close()
		}

		fmt.Fprintf(out, "package %s\n\n", packageName)
		classPaths := make(map[string]string, len(classNames))
		for _, n := range classNames {
			p := strings.Replace(n, ".", "/", -1)
			p = fmt.Sprintf("%s.class", p)
			classPaths[p] = n
		}

		fmt.Fprint(out, "// Code generated by scala2go DO NOT EDIT.\n\n")
		for i := range jarFiles {
			jar, err := zip.OpenReader(jarFiles[i])
			if err != nil {
				return errors.Wrap(err, "unable to open jar file")
			}
			defer jar.Close()

			g := &generator{
				out:             out,
				classNames:      classNames,
				customTypes:     viper.GetStringMapString("custom-types"),
				caseOverrides:   viper.GetStringSlice("case-overrides"),
				blacklistTypes:  viper.GetStringSlice("blacklist-types"),
				blacklistFields: viper.GetStringSlice("blacklist-fields"),
			}

			for _, f := range jar.File {
				if n := classPaths[f.Name]; n != "" {
					err := g.classFileToStruct(n, f)
					if err != nil {
						return err
					}
					// Found the class in the jar, remove it from our lookups
					delete(classPaths, f.Name)
					if len(classNames) > 0 {
						_, classNames = classNames[0], classNames[1:]
					}
				}
			}
		}
		return nil
	},
}

func init() {
	cobra.OnInitialize(initConfig)

	rootCmd.PersistentFlags().StringVarP(&packageName, "package", "p", "scala", "Go package name")
	rootCmd.PersistentFlags().StringSliceVarP(&jarFiles, "jar-file", "f", []string{}, "Java .jar files to search for classes")
	rootCmd.PersistentFlags().StringVarP(&goFile, "go-file", "o", "-", "Go file for output ('-' for stdout)")
}

func main() {
	if err := rootCmd.Execute(); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func initConfig() {
	viper.AddConfigPath(".")
	viper.SetConfigName(".scala2go")

	viper.ReadInConfig()
}
